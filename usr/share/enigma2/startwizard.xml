<wizard>
		<step id="start" nextstep="introduction">
			<text value="Welcome.\n\nThis start wizard will guide you through the basic setup of your Dreambox.\nPress the OK button on your remote control to move to the next step." />
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="introduction" >
			<text value="Use the up/down keys on your remote control to select an option. After that, press OK." />
			<list>
				<listentry caption="Use wizard to set up basic features" step="nima" />
				<listentry caption="Exit wizard" step="end" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="nima">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Use the left and right buttons to change an option.\n\nPlease set up tuner A" />
			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimb">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Please set up tuner B" />
			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimc">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Please set up tuner C" />
			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimd">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and config.misc.startwizard.shownimconfig.value
			</condition>
			<text value="Please set up tuner D" />
			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="satlistsquestion">
			<text value="Do you want to install default sat lists?" />
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<code>
self.hideRc()
			</code>
			<list>
				<listentry caption="Yes" step="startdefaultlists" />
				<listentry caption="No" step="scanquestion" />
			</list>
		</step>

		<step id="scanquestion">
			<text value="Do you want to do a service scan?" />
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<code>
self.hideRc()
			</code>
			<list>
				<listentry caption="Yes, do an automatic scan now" step="scan" />
				<listentry caption="Yes, do a manual scan now" step="manualscan" />
				<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
			</list>
		</step>
		<step id="scan" nextstep="finisheddefaultsatlists">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>			
			<text value="What do you want to scan?" />
			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="manualscan">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<text value="What do you want to scan?" />
			<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="nextscan">
			<condition>
from Components.config import config
from Components.NimManager import nimmanager
self.condition = config.misc.startwizard.doservicescan.value and nimmanager.somethingConnected()
			</condition>
			<text value="Do you want to do another manual service scan?" />
			<list>
				<listentry caption="Yes, do another manual scan now" step="manualscan" />
				<listentry caption="No, scan later manually" step="finisheddefaultsatlists" />
			</list>
		</step>
		<step id="finisheddefaultsatlists">
			<text value="Automatic standby mode\n\nIf you don't press any button on the remote control, your Dreambox can enter the standby mode automatically. You can choose the period after which the standby mode will be activated or disable this functionality now." />
			<list type="config" configelement="config.usage.inactivity_shutdown" />
			<code pos="after">
config.usage.inactivity_shutdown_initialized.value = True
config.usage.inactivity_shutdown_initialized.save()
			</code>
		</step>
		<step id="enableparentalcontrol">
			<text value="Do you want to enable the parental control feature on your dreambox?" />
			<list>
				<listentry caption="Yes" step="parentalsetup" />
				<listentry caption="No" step="expert" />
			</list>
			<code pos="after">
from Components.config import config
if self["list"].index == 0:
	config.ParentalControl.configured.value = True
else:
	config.ParentalControl.configured.value = False
config.ParentalControl.configured.save()
			</code>
		</step>
		<step id="parentalsetup">
			<text value="You need to set a PIN code and hide it from your children.\n\nDo you want to set the pin now?" />
			<list>
				<listentry caption="Yes" step="finishparentalsetup" />
				<listentry caption="No" step="warnpin" />
			</list>
			<code pos="after">
from Components.config import config
from ParentalControlSetup import ParentalControlChangePin
if self["list"].index == 0:
	self.session.open(ParentalControlChangePin, config.ParentalControl.servicepin[0], _("parental control pin"))
			</code>
		</step>
		<step id="warnpin">
			<text value="Please be aware, that anyone can disable the parental control, if you have not set a PIN." />
		</step>
		<step id="finishparentalsetup">
			<code>
from Components.config import config
if config.ParentalControl.setuppin.value == "aaaa":
	config.ParentalControl.setuppinactive.value = False
else:
	config.ParentalControl.setuppinactive.value = True
config.ParentalControl.setuppinactive.save()
config.ParentalControl.servicepinactive.value = True
config.ParentalControl.servicepinactive.save()
config.ParentalControl.setuppin.value = config.ParentalControl.servicepin[0].value
config.ParentalControl.setuppin.save()
			</code>

			<text value="After the start wizard is completed, you need to protect single services. Refer to your dreambox's manual on how to do that." />
		</step>
		<step id="expert">
			<text value="Your Dreambox offers three levels of configuration options:\n\nSimple - We suggest this level if this is your first contact with a Dreambox.\nIntermediate - This level enables you to change some more options, mainly the graphical user interface and the behaviour of your Dreambox.\nExpert - This gives you full control over all available settings of your Dreambox.\n\nWarning: Higher levels may lead to increased usage complexity." />
			<list type="config" configelement="config.usage.setup_level" />
		</step>
		<step id="multibouquets">
			<condition>
from Components.config import config
self.condition = config.usage.setup_level.value != "simple" 
			</condition>
			<text value="Multiple Bouquets Feature\n\nYour Dreambox offers a multiple bouquets feature. If this feature is active, you can manage multiple favorite lists of TV and radio services. If deactivated, only one favorite list is available which makes navigation a bit easier.\n\nWould you like to activate the multiple bouquets feature now?" />
			<list type="config" configelement="config.usage.multibouquet" />
		</step>
		<step id="end" laststep="true">
			<condition>
self.condition = self.isLastWizard
			</condition>
			<text value="Thank you for using the wizard. Your box is now ready to use.\nPlease press OK to start using your Dreambox." />
		</step>
</wizard>
